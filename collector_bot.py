import logging
import requests
from bs4 import BeautifulSoup
import html
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.constants import ParseMode

# --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ---
TOKEN = "8002915386:AAF_Ycg6Ao8i8A114Gcs95s0q6yEcINneVA"
CATALOG_URL = "https://coins.bank.gov.ua/catalog.html" 

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

def scrape_nbu_coins():
    """–í–µ—Ä—Å—ñ—è –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –¥–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó."""
    logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–∞—Ç–∞–ª–æ–≥—É...")
    
    try:
        response = requests.get(CATALOG_URL, headers={'User-Agent': 'Mozilla/5.0'})
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')
        product_cards = soup.find_all('div', class_='product')
        
        if not product_cards:
            return ["–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ."]

        in_stock_products = []
        coming_soon_products = []
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(product_cards)} —Ç–æ–≤–∞—Ä—ñ–≤. –ü–æ—á–∏–Ω–∞—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–±—ñ—Ä —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...")

        for i, card in enumerate(product_cards):
            name_element = card.find('a', class_='model_product')
            if not name_element: continue

            name = name_element.text.strip()
            product_url = "https://coins.bank.gov.ua" + name_element['href']
            
            try:
                product_page_response = requests.get(product_url, headers={'User-Agent': 'Mozilla/5.0'})
                product_page_response.raise_for_status()
                product_soup = BeautifulSoup(product_page_response.text, 'html.parser')
                
                price_element = product_soup.find('span', class_='new_price_card_product')
                price = price_element.text.strip() if price_element else "–ù/–î"

                year = "–ù/–î"
                mintage = "–ù/–î"
                param_names = product_soup.find_all('span', class_='product-parameters-name')
                for param in param_names:
                    if '–†—ñ–∫' in param.text:
                        year_element = param.find_next_sibling('p', class_='product-parameters-details')
                        if year_element: year = year_element.text.strip()
                    if '–¢–∏—Ä–∞–∂' in param.text:
                        mintage_element = param.find_next_sibling('p', class_='product-parameters-details')
                        if mintage_element: mintage = mintage_element.text.strip()
                
                status_text = ""
                status_element = product_soup.find('div', class_='product_labels')
                if status_element and status_element.text.strip():
                    status_text = status_element.text.strip().upper()

                stock = "–ù/–î"
                if not status_text:
                    all_p_tags = product_soup.find_all('p')
                    for p_tag in all_p_tags:
                        if '–ù–∞ —Å–∫–ª–∞–¥—ñ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –≤—Å—å–æ–≥–æ' in p_tag.get_text():
                            stock_span_element = p_tag.find('span', class_='pd_qty')
                            if stock_span_element: stock = stock_span_element.text.strip()
                            break
                
                if status_text == "" and stock == "0":
                    logger.info(f"–§–Ü–õ–¨–¢–†: –ü—Ä–æ–ø—É—Å–∫–∞—é '{name}', –±–æ –π–æ–≥–æ –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —ñ –≤—ñ–Ω –Ω–µ –æ—á—ñ–∫—É—î—Ç—å—Å—è.")
                    continue
                
            except requests.RequestException as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–æ–≤–∞—Ä—É {name}: {e}")
                continue
            
            if status_text:
                emoji = "üìÜ"
                message_part = (
                    f"{emoji} <b><a href='{product_url}'>{html.escape(name)}</a></b>\n"
                    f"    <b>–†—ñ–∫:</b> {html.escape(year)}\n"
                    f"    <b>–¢–∏—Ä–∞–∂:</b> {html.escape(mintage)}\n"
                    f"    <b>–°—Ç–∞—Ç—É—Å:</b> {html.escape(status_text)}\n"
                    f"    <b>–¶—ñ–Ω–∞:</b> {html.escape(price)}"
                )
                coming_soon_products.append(message_part)
            else:
                emoji = "‚úÖ"
                message_part = (
                    f"{emoji} <b><a href='{product_url}'>{html.escape(name)}</a></b>\n"
                    f"    <b>–†—ñ–∫:</b> {html.escape(year)}\n"
                    f"    <b>–¢–∏—Ä–∞–∂:</b> {html.escape(mintage)}\n"
                    f"    <b>–ó–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–∞ —Å–∫–ª–∞–¥—ñ:</b> {html.escape(stock)} —à—Ç.\n"
                    f"    <b>–¶—ñ–Ω–∞:</b> {html.escape(price)}"
                )
                in_stock_products.append(message_part)
        
        logger.info("–ó–±—ñ—Ä —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return {"in_stock": in_stock_products, "coming_soon": coming_soon_products}

    except Exception as e:
        logger.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É: {e}")
        return ["<b>–ü–æ–º–∏–ª–∫–∞:</b> –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –¢–µ–ø–µ—Ä –≤—ñ–Ω —Å—Ç–≤–æ—Ä—é—î –ø–æ—Å—Ç—ñ–π–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É."""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É, —è–∫–∞ –±—É–¥–µ –≤–Ω–∏–∑—É –µ–∫—Ä–∞–Ω–∞
    keyboard = [
        [KeyboardButton("‚ñ∂Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç—ñ –ù–ë–£")]
    ]
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∞–º—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–í—ñ—Ç–∞—é –≤ <b>Collector UA</b>!\n\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç.',
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def check_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¶—è —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä —Ä–µ–∞–≥—É—î –Ω–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –∫–Ω–æ–ø–∫–∏."""
    chat_id = update.message.chat_id
    await context.bot.send_message(chat_id=chat_id, text="üîç <b>–ó–∞—á–µ–∫–∞–π—Ç–µ, –ø–µ—Ä–µ–≤—ñ—Ä—è—é, —Å–æ—Ä—Ç—É—é —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—é...</b> –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ —Ö–≤–∏–ª–∏–Ω–∏.", parse_mode=ParseMode.HTML)
    
    results = await asyncio.to_thread(scrape_nbu_coins)
    
    if isinstance(results, dict):
        in_stock_list = results.get("in_stock", [])
        coming_soon_list = results.get("coming_soon", [])

        if not in_stock_list and not coming_soon_list:
            await context.bot.send_message(chat_id=chat_id, text="‚ÑπÔ∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤ —É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–±–æ —Ç–∏—Ö, —â–æ –æ—á—ñ–∫—É—é—Ç—å—Å—è.", parse_mode=ParseMode.HTML)
            return

        # --- –ë–õ–û–ö –¢–û–í–ê–†–Ü–í –í –ù–ê–Ø–í–ù–û–°–¢–Ü ---
        if in_stock_list:
            header = f"üì≤ <b>–ü—Ä–æ–¥—É–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {len(in_stock_list)} —à—Ç.</b>"
            await context.bot.send_message(chat_id=chat_id, text=header, parse_mode=ParseMode.HTML)
            message_batch = []
            for product in in_stock_list:
                message_batch.append(product)
                if len(message_batch) >= 5:
                    await context.bot.send_message(chat_id=chat_id, text="\n\n".join(message_batch), parse_mode=ParseMode.HTML, disable_web_page_preview=True)
                    message_batch = []
            if message_batch:
                await context.bot.send_message(chat_id=chat_id, text="\n\n".join(message_batch), parse_mode=ParseMode.HTML, disable_web_page_preview=True)

        # --- –ë–õ–û–ö –¢–û–í–ê–†–Ü–í, –©–û –û–ß–Ü–ö–£–Æ–¢–¨–°–Ø ---
        if coming_soon_list:
            # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Ä–∏—Å–æ—á–∫–∏-—Ä–æ–∑–¥—ñ–ª—é–≤–∞—á
            header = f"‚è≥ <b>–ü—Ä–æ–¥—É–∫—Ü—ñ—è —è–∫–∞ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º: {len(coming_soon_list)} —à—Ç.</b>"
            await context.bot.send_message(chat_id=chat_id, text=header, parse_mode=ParseMode.HTML)
            for product in coming_soon_list:
                await context.bot.send_message(chat_id=chat_id, text=product, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    else:
        await context.bot.send_message(chat_id=chat_id, text=results[0], parse_mode=ParseMode.HTML)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –∑ –Ω–æ–≤–∏–º –æ–±—Ä–æ–±–Ω–∏–∫–æ–º."""
    application = Application.builder().token(TOKEN).build()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start —Ç–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∏
    start_handler = CommandHandler("start", start)
    check_handler = MessageHandler(filters.Text(["‚ñ∂Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç—ñ –ù–ë–£"]), check_inventory)
    
    application.add_handler(start_handler)
    application.add_handler(check_handler)

    print("–ë–æ—Ç Collector UA –∑–∞–ø—É—â–µ–Ω–∏–π... –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
    application.run_polling()

if __name__ == "__main__":
    main()